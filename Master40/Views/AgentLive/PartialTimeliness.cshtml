@{
}
<style>
    .chartTimelinessWrapper {
        overflow-x: hidden;
        position: relative;
        min-width: 150px;
        width: 99%;
        height: 120px;
        margin: 0 auto;
    }


</style>
<div class="card" style="margin-top: 10px;">
    <div class="card-header">
        <b>Timeliness <span id="valueTimeliness"> 100 % </span></b>
    </div>
    <div class="card-body">
    <div class="chartTimelinessWrapper">
        <!--div id="js-legend" class="chart-legend"><div-->
        <canvas id="TimelinessElement"></canvas>
    </div>
    </div>
</div>
    <script>
    var timeliness_label = [["Timeliness"]];
    var timelines_data_core = [0];
    var timeliness_data_inTime = [[0]];
    var timeliness_data_tooLate = [[0]];
        
        var TimelinessElement = document.getElementById("TimelinessElement");

    var TimelinessChart = new Chart(TimelinessElement, {
        type: 'horizontalViolin',
        data: {
            // define label tree
            labels: timeliness_label,
            datasets: [
                {
                    label: 'Early',
                    backgroundColor: ["rgba(214, 233, 198, 0.6)"],
                    borderColor: ["rgba(21, 87, 36, 0.9)"],
                    borderWidth: 1,
                    outlierColor: '#000000',
                    padding: 10,
                    itemRadius: 2,
                    data: timeliness_data_inTime
                }, {
                    label: 'Late',
                    backgroundColor: ["rgba(227, 76, 87, 0.3)"],
                    borderColor: ["rgba(227, 76, 87, 0.9)"],
                    borderWidth: 1,
                    outlierColor: '#000000',
                    padding: 10,
                    itemRadius: 2,
                    data: timeliness_data_tooLate
                }
            ]
        },
        options: {
            maintainAspectRatio: false,
            responsive: true,
            legend: { display: false, position: 'bottom' },
            title: { display: false, text: 'Throughput Times' },
            scales: {
                xAxes: [
                    {
                        stacked: true,
                        ticks: { fontSize: 10 } 
                    }
                ],
                yAxes: [{
                    display: false,
                    scaleLabel: { display: false },
                    stacked: true,
                    ticks: { fontSize: 10 } 
                    }]
                }
            }
        });

    //processingProxy.on("Timeliness", updateTimeliness);
    
    function updateTimeliness(serialized) {
        timelines_data_core.unshift(parseInt(serialized));
        timelines_data_core = shiftArray(timelines_data_core, 50);
        timeliness_data_inTime = [[0]];
        timeliness_data_tooLate = [[0]];
        // var scale_timeliness = Math.abs(
        var sum_pos = 0;
        var sum_neg = 0;
        timelines_data_core.forEach(x => {
            var valueAsInt = parseInt(x);
            if (valueAsInt <= 0) {
                timeliness_data_inTime[0].push(valueAsInt);
                sum_neg++;
            } else {
                timeliness_data_tooLate[0].push(valueAsInt);
                sum_pos++;
            }
    });

    TimelinessChart.data.datasets[0].data = timeliness_data_inTime;
    TimelinessChart.data.datasets[1].data = timeliness_data_tooLate;
    TimelinessChart.update();


    var sum = sum_pos + sum_neg ;
    var div = sum_neg / sum;
    var val = Math.round(div * 100);
    $("#valueTimeliness").replaceWith("<span id='valueTimeliness'>" + val +  " %</span>");

    //console.log("Sorry, we are out of " + expr + ".");
    };
    </script>
