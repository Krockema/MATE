@model Master40.DB.DataModel.M_Resource
@{ 
    var name = Model.Name.Replace(oldValue: " ", newValue: "");
    var percent = "0 %";
}
<style>
    .resourceLayer {
        height: 44px;
        margin-right: 10px;
    }
</style>


<div class="bs-callout bs-callout-dark" id="callout-xref-input-group" style="padding: 0px 0px;">
    <h6>
        @Model.Name.Replace("Resource ", "").Replace("Operator", "Op.")
        <!-- <button class="btn btn-xs" type="button" onclick="breakDown('@name')">
            <i class="fa fa-fire float-right" style="width: 15px"></i>
        </button>-->
    </h6>
    <div class="position-relative">
        <div style="margin: 5px; width: 100%;">
            <div class="resourceContainer">
                <!--<div class="textLayer @name">
                    <span class="@name">@percent</span>
                </div>-->
                <div class="resourceLayer" id="chartContainer_@name">

                    <!--div id="js-legend" class="chart-legend"><div-->

                    <canvas id="@name"></canvas>
                </div>
            </div>
        </div>
        <div class="position-absolute" style="bottom: -5px; right: 1px">
            <div class="online">
                <i class="fas fa-tools"></i>
                <span class="@name">
                    &nbsp;Current: 0%
                    <!-- @Model.ResourceSetups.Select(x => x.ResourceCapabilityProvider.ResourceCapability.Name).Distinct().First() -->
                </span>
            </div>
        </div>
    </div>
</div>

        <style>
            </style>
        <script>

            var work_values_@name = [
                { "x": 0.0, "y": 0.0 }, { "x": 0.0, "y": 0.0 }, { "x": 0.0, "y": 0.0 }, { "x": 0.0, "y": 0.0 }, { "x": 0.0, "y": 0.0 },
                { "x": 0.0, "y": 0.0 }, { "x": 0.0, "y": 0.0 }, { "x": 0.0, "y": 0.0 }, { "x": 0.0, "y": 0.0 }, { "x": 0.0, "y": 0.0 }
            ];

            var setup_values_@name = [
                { "x": 0.0, "y": 0.0 }, { "x": 0.0, "y": 0.0 }, { "x": 0.0, "y": 0.0 }, { "x": 0.0, "y": 0.0 }, { "x": 0.0, "y": 0.0 },
                { "x": 0.0, "y": 0.0 }, { "x": 0.0, "y": 0.0 }, { "x": 0.0, "y": 0.0 }, { "x": 0.0, "y": 0.0 }, { "x": 0.0, "y": 0.0 }
            ];
    var @name = document.getElementById("@Model.Name.Replace(oldValue: " ", newValue: "")");
    var Workload_@name =
        new Chart(@name, {
            type: "scatter"
            , data: {
                datasets: [ {
                        data: work_values_@name
                        , type: "line"
                        , lineTension: 0.5
                        , borderWidth: 1
                        , borderColor: "rgba(3,79,175, .6)"
                        , backgroundColor: "rgba(3,79,175, .3)"
                        , pointBackgroundColor: "rgba(3,79,175, .0)"
                        , pointBorderColor: "rgba(3,79,175, .0)"
                        , showLine: true
                        , fill: true
                        , label: "Workload"
                        , yAxisID: "first-y-axis"
                    },
                    {
                        data:  setup_values_@name
                        , type: "line"
                        , lineTension: 0.5
                        , borderWidth: 1
                        , borderColor: "rgba(246, 167, 30,  .6)"
                        , backgroundColor: "rgba(246, 167, 30,  .3)"
                        , pointBackgroundColor: "rgba(246, 167, 30,  .0)"
                        , pointBorderColor: "rgba(246, 167, 30,  .0)"
                        , showLine: true
                        , fill: "-1"
                        , label: "Setup Times"
                        , yAxisID: "first-y-axis"
                    }]
                , labels: ["Work", "Setup"]
            },
            options: {
                responsive: true
                , maintainAspectRatio: false
                , title: {
                    position: "top"
                    , fontSize: 12
                    , fontStyle: "bold"
                    , text: "@Model.Name.Replace("Resource ", "").Replace("Operator", "Op.")"
                    , display: false
                }, legend: {
                    display: false
                    , position: "bottom"
                    , fullWidth: true
                },
                scales: {
                    xAxes: [{
                        type: "linear"
                        , id: "first-x-axis"
                        , scaleLabel: { display: false, labelString: "Time in min", fontSize: 12 }
                        , ticks: { min: 0, max: 10,
                            stepSize: -1, display: false
                        }
                        , display: true
                    }]
                    , yAxes: [{
                        type: "linear"
                        , id: "first-y-axis"
                        , scaleLabel: {
                            display: false
                            , labelString: "Workload in %"
                            , fontSize: 12
                        }
                        , ticks: { min: 0.0, stepSize: 0, max: 100, display: false }
                        , display: false
                    }]
                }
            }
        });

    processingProxy.on("@name", function (msg) {

        var a = msg.split(/ /);
        console.log(@name + msg);
        work = a[0] * 100.0, 0;
        setup = a[1] * 100.0, 0;
        idle = 100 - work - setup;
        //console.log(@name + " Work: " + work + " Setup: " + setup + " Idle " + idle);
        if (isNaN(msg)) msg = 0;

        document.getElementsByClassName("@name")[0].innerHTML = " Current: " + Math.round(work + setup, 0) + " %";
        var last = (Workload_@name).data.datasets[0].data[9].x + 1;
        (work_values_@name).push({ x: last ,y: work });
        (setup_values_@name).push({ x: last ,y: work + setup });
        (work_values_@name).shift();
        (setup_values_@name).shift();
        // (Workload_@name).data.datasets[0].data = (Workload_@name).data.datasets[0].data.slice(1);
        // (Workload_@name).data.datasets[1].data = (Workload_@name).data.datasets[1].data.slice(1);
        (Workload_@name).options.scales.xAxes[0].ticks.min = (Workload_@name).data.datasets[0].data[0].x;
        (Workload_@name).options.scales.xAxes[0].ticks.max = last;

        (Workload_@name).update();
    });

    processingProxy.on("Machine(@name)_State", function (msg) {
        //console.log("@name :" + msg);
        if (msg === 'offline') {
            document.getElementById("chartContainer_@name").className =
                document.getElementById("chartContainer_@name").className.replace('online', 'offline');
        } else {
            document.getElementById("chartContainer_@name").className =
                document.getElementById("chartContainer_@name").className.replace('offline', 'online');
        }
    });
        </script>



