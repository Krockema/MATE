@model IEnumerable<Master40.DB.ReportingModel.SimulationConfiguration>

@{
    ViewData[index: "Title"] = "Index";
    Layout = "_Layout";
    int maxValue = 0;
}
<h2>Index</h2>
<p>
    <a asp-action="Create" asp-controller="SimulationConfigurations" data-target="#modal-container"
       data-toggle="modal" class="btn btn-default">
        <span class="glyphicon glyphicon-pencil" aria-hidden="true"></span> Create
    </a>
</p>
<div class="container-fluid">
    <table class="table">
        <thead>
            <tr>
                <th>
                    @Html.DisplayNameFor(expression: model => model.Name)
                </th>
                <th>
                    Max Time
                </th>
                <th>
                    @Html.DisplayNameFor(expression: model => model.Lotsize)
                </th>
                <th>
                    Orders
                </th>
                <th>
                    Runs
                </th>
                <th>
                    @Html.DisplayNameFor(expression: model => model.Seed)
                </th>
                <th  style="text-align: right">Options</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model)
            {
                <tr>
                    <td>
                        @Html.DisplayFor(expression: modelItem => item.Name)
                    </td>
                    <td>
                        @Html.DisplayFor(expression: modelItem => item.MaxCalculationTime)
                    </td>
                    <td>
                        @Html.DisplayFor(expression: modelItem => item.Lotsize)
                    </td>
                    <td>
                        @Html.DisplayFor(expression: modelItem => item.OrderQuantity)
                    </td>
                    <td>
                        @Html.DisplayFor(expression: modelItem => item.ConsecutiveRuns)
                    </td>
                    <td>
                        @Html.DisplayFor(expression: modelItem => item.Seed)
                    </td>
                    <td style="text-align: right">
                        <a id="@item.Id" asp-action="Details" asp-controller="SimulationConfigurations"
                           asp-route-id="@item.Id" data-target="#modal-container" data-toggle="modal"
                           class="btn btn-outline-secondary btn-sm text-center align-middle">
                            <i class="fa fa-eye fa-1x fa-unset"></i>
                        </a>
                        <a id="@item.Id" asp-action="Edit" asp-controller="SimulationConfigurations"
                           asp-route-id="@item.Id" data-target="#modal-container" data-toggle="modal"
                           class="btn btn-outline-secondary btn-sm">
                            <i class="fa fa-pencil-square-o fa-1x fa-unset"></i>
                        </a>
                        <div class="btn-group btn-group">
                            <a class="btn btn-outline-secondary btn-sm simbtn ladda-button" id="decentral-ladda-btn_@Html.Raw(value: item.Id)"
                               data-style="zoom-in" asp-controller="SimulationConfigurations" asp-action="Decentral"
                               asp-route-id="@item.Id" onclick="growlMsg('Simulation Started')">

                                <span class="ladda-label">

                                    <i class="fa fa-ravelry fa-2x fa-unset"></i>Run <span class="badge">@Html.DisplayFor(expression: modelItem => item.DecentralRuns)</span>

                                </span>

                            </a>
                            <a class="btn btn-outline-secondary btn-sm simbtn ladda-button"
                               id="central-ladda-btn_@Html.Raw(value: item.Id)" data-style="zoom-in" asp-controller="SimulationConfigurations"
                               asp-action="Central" asp-route-id="@item.Id" onclick=" growlMsg('Simulation Started')">
                                <span class="ladda-label">
                                    <i class="fa fa-magic fa-2x"></i>Run <span class="badge">@Html.DisplayFor(expression: modelItem=>item.CentralRuns)</span>
                                </span>
                            </a>
                            <!-- Split button -->
                            <div class="btn-group btn-group-sm">
                                <a href="/SimulationCompare/Index/@item.Id/1" class="btn btn-outline-secondary btn-sm">
                                    <i class="fa fa-tachometer fa-2x"></i> Compare
                                </a> 
                                <button type="button" class="btn btn-danger dropdown-toggle btn-sm"
                                        data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                    <span class="caret"></span>
                                    <span class="sr-only">Toggle Dropdown</span>
                                </button>
                                <ul class="dropdown-menu">
                                    <li class="dropdown-item">
                                        <a id="consolidateRuns" asp-action="ConsolidateRuns" asp-route-id="@item.Id"
                                           asp-controller="SimulationConfigurations" data-target="#modal-container"
                                           data-toggle="modal" class="btn btn-outline-secondary btn-sm" style="height: 30px; width: 100%">
                                            Consolidate Runs
                                        </a>
                                    </li>
                                    <li role="separator" class="divider dropdown-item"></li>
                                    <li class="dropdown-item">
                                        <a id="consolidateRuns" asp-action="ConsolidateLeadTimes" asp-route-id="@item.Id"
                                           asp-controller="SimulationConfigurations" data-target="#modal-container"
                                           data-toggle="modal" class="btn btn-outline-secondary btn-sm" style="height: 30px; width: 100%">
                                            (Optional Show - LeadTime)
                                        </a>
                                    </li>
                                    <li class="dropdown-item">
                                        <a href="#" class="btn btn-outline-secondary btn-sm" style="height: 30px; width: 100%">(Optional Show - Timeliness)</a>
                                    </li>
                                    <li class="dropdown-item">
                                        <a href="#" class="btn btn-outline-secondary btn-sm" style="height: 30px; width: 100%">(Optional Show - LayTimes)</a>
                                    </li>
                                </ul>
                            </div>
                        </div>
                    </td>
                </tr>
                <tr>
                    <td colspan="7">
                        <div class="row">
                            <div class="col-lg-3">Decentral Run <span id="@Html.Raw(value: item.Id)PogressRunDecentral" class="badge">@item.DecentralRuns</span> of
                                <span
                                    class="badge">@item.ConsecutiveRuns</span>
                            </div>
                            <div class="col-lg-9">
                                <div class="progress">
                                    <div id="@Html.Raw(value: item.Id)PogressDecentral" class="progress-bar text-dark" role="progressbar"
                                         aria-valuenow="0" aria-valuemin="0" aria-valuemax="@item.OrderQuantity"
                                         style="width:0%">0%</div>
                                </div>
                            </div>
                            <div class="col-lg-3">Central Run <span id="@Html.Raw(value: item.Id)PogressRunCentral" class="badge">@item.CentralRuns</span> of
                                <span
                                    class="badge">@item.ConsecutiveRuns</span>
                            </div>
                            <div class="col-lg-9">
                                <div class="progress">
                                    <div id="@Html.Raw(value: item.Id)PogressCentral" class="progress-bar text-dark" role="progressbar"
                                         aria-valuenow="0" aria-valuemin="0" aria-valuemax="@item.OrderQuantity"
                                         style="width: 0%">0%</div>
                                </div>
                            </div>
                        </div>

                    </td>
                </tr>
            }
        </tbody>
    </table>
    </div>
    <div id="modal-container" class="modal fade hidden-print" tabindex="-1" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content"  style="width: fit-content;">
                <div class='loading' />
            </div>
        </div>
    </div>
    <div id="modal-sub-container" class="modal fade hidden-print" tabindex="-1" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">

            </div>
        </div>
    </div>
<script>

    $(document).ready(function () {
        // Block Interactions
        //Ladda.bind( '.simbtn' );
        $('#consolidate').click(function(e) {
            var l = Ladda.create(this);
            l.start();
            $.get(e.currentTarget.href)
                .always(function() { l.stop(); });
            return false;
        });
        $('.simbtn').click(function(e) {
            e.preventDefault();
            var l = Ladda.create(document.querySelector("#" + e.currentTarget.id));
            l.start();
            e.currentTarget.style.background = 'grey';
            $.get(e.currentTarget.href);
                //.always(function() { l.stop(); })
            //return false;
        });


    });
    const processingProxy = new signalR.HubConnectionBuilder()
        .withUrl("/MessageHub")
        .configureLogging(signalR.LogLevel.Information)
        .build();

    processingProxy.on("clientListener", function (mstype, simId, count, simType) {
        if (mstype == "ProcessingUpdate") {
            //growlMsg(mstype);
            let selector = "#" + simId + "Pogress" + simType;
            $(selector).css('width', count + '%').attr('aria-valuenow', count);
            $(selector).text(count + "%");
        } else if (mstype == "ProcessingComplete") {
            growlMsg("Decentral Run Completed")
            var l = Ladda.create(document.querySelector("#decentral-ladda-btn_" + simId ));
            l.toggle();
            $("#decentral-ladda-btn_" + simId).css('background', 'white');
            let selector = "#" + simId + "PogressRunDecentral";
            $(selector).text(count);
        } else if (mstype == "MrpProcessingComplete") {
            growlMsg("Central MRP Run Compleated")
            var l = Ladda.create(document.querySelector("#central-ladda-btn_" + simId));
            l.toggle();
            $("#central-ladda-btn_" + simId).css('background', 'white');
        } else {
            growlMsg(mstype);
        }
    });

    processingProxy.start()
        .done(function () { processingProxy.invoke('SystemReady') })
        .catch(err => console.error(err.toString()));
    // Processing Hub is loaded
    
    function growlMsg(msg) {
        $.bootstrapGrowl(msg, {
            ele: 'body', // which element to append to
            type: 'info', // (null, 'info', 'danger', 'success')
            offset: { from: 'bottom', amount: 10 }, // 'top', or 'bottom'
            align: 'right', // ('left', 'right', or 'center')
            width: 400, // (integer, or 'auto')
            height: 'auto',
            delay: 4000, // Time while the message will be displayed
            allow_dismiss: false, // If true then will display a cross to close the popup.
            stackup_spacing: 10 // spacing between consecutively stacked growls.
        });
    }


</script>

